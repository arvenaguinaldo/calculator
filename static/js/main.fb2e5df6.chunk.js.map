{"version":3,"sources":["components/Button/Button.js","components/Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","style","className","val","children","isNaN","Input","input","App","state","a","operator","addToInput","setState","handleOperator","handleTotal","b","result","parseFloat","handlePercentage","handleClear","this","onClick","bind","flex","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb2e5df6.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css'\n\nconst isOperator = val => {\n  return !isNaN(val) || val === \".\" || val === \"AC\" || val === \"%\";\n}\n\nconst Button = (props) => (\n  <div\n    {...props}\n    style={props.style}\n    className={`button ${isOperator(props.children) ? null : 'operator'}`}\n  >\n    {props.children}\n  </div>\n)\n\nexport default Button;\n\n","import React from 'react';\nimport './Input.css'\n\nconst Input = (props) => <div className=\"input\">{props.input}</div>\n\n\nexport default Input;\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport Button from './components/Button/Button'\nimport Input from './components/Input/Input'\n\nclass App extends Component {\n  state = {\n    a: \"\",\n    input: \"\",\n    operator: \"\"\n  };\n\n  addToInput = val => {\n    this.setState({input: this.state.input + val})\n  }\n\n  handleOperator = val => {\n    const {input} = this.state;\n    this.setState({a: input})\n    // this.setState({input: ''})\n    this.setState({operator: val})\n  }\n\n  handleTotal = () => {\n    const {operator, input, a} = this.state;\n    const b = input\n    let result = 0\n\n    switch(operator) {\n      case '+':\n          result = parseFloat(a) + parseFloat(b);\n          this.setState({input: result})\n          break;\n      case '-':\n          result = parseFloat(a) - parseFloat(b);\n          this.setState({input: result})\n          break;\n      case '×':\n          result = parseFloat(a) * parseFloat(b);\n          this.setState({input: result})\n          break;\n      case '÷':\n          result = parseFloat(a) / parseFloat(b);\n          this.setState({input: result})\n          break;\n      default:\n        return null;\n    }\n  }\n\n  handlePercentage = () => {\n    const b = this.state.input\n    const result = parseFloat(b) / 100;\n    this.setState({input: result})\n  }\n\n  handleClear = () => {\n    this.setState({input: '', a: '', operator: ''})\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Input input={this.state.input}></Input>\n          <div className=\"row\">\n            <Button onClick={this.handleClear.bind(this, 'AC')} style={{flex: 2, backgroundColor: '#6C6C6D'}}>AC</Button>\n            <Button onClick={this.handlePercentage.bind(this, '%')} style={{backgroundColor: '#6C6C6D'}}>%</Button>\n            <Button onClick={this.handleOperator.bind(this, '÷')}>÷</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button onClick={this.addToInput.bind(this, '7')}>7</Button>\n            <Button onClick={this.addToInput.bind(this, '8')}>8</Button>\n            <Button onClick={this.addToInput.bind(this, '9')}>9</Button>\n            <Button onClick={this.handleOperator.bind(this, '×')}>×</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button onClick={this.addToInput.bind(this, '4')}>4</Button>\n            <Button onClick={this.addToInput.bind(this, '5')}>5</Button>\n            <Button onClick={this.addToInput.bind(this, '6')}>6</Button>\n            <Button onClick={this.handleOperator.bind(this, '-')}>-</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button onClick={this.addToInput.bind(this, '1')}>1</Button>\n            <Button onClick={this.addToInput.bind(this, '2')}>2</Button>\n            <Button onClick={this.addToInput.bind(this, '3')}>3</Button>\n            <Button onClick={this.handleOperator.bind(this, '+')}>+</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button onClick={this.addToInput.bind(this, '0')} style={{flex: 2}}>0</Button>\n            <Button onClick={this.addToInput.bind(this, '.')}>.</Button>\n            <Button onClick={this.handleTotal}>=</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}